/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ConversationsImport } from "./routes/conversations";
import { Route as ConversationsConversationIdImport } from "./routes/conversations.$conversationId";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const ConversationsRoute = ConversationsImport.update({
  id: "/conversations",
  path: "/conversations",
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const ConversationsConversationIdRoute =
  ConversationsConversationIdImport.update({
    id: "/$conversationId",
    path: "/$conversationId",
    getParentRoute: () => ConversationsRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/conversations": {
      id: "/conversations";
      path: "/conversations";
      fullPath: "/conversations";
      preLoaderRoute: typeof ConversationsImport;
      parentRoute: typeof rootRoute;
    };
    "/conversations/$conversationId": {
      id: "/conversations/$conversationId";
      path: "/$conversationId";
      fullPath: "/conversations/$conversationId";
      preLoaderRoute: typeof ConversationsConversationIdImport;
      parentRoute: typeof ConversationsImport;
    };
  }
}

// Create and export the route tree

interface ConversationsRouteChildren {
  ConversationsConversationIdRoute: typeof ConversationsConversationIdRoute;
}

const ConversationsRouteChildren: ConversationsRouteChildren = {
  ConversationsConversationIdRoute: ConversationsConversationIdRoute,
};

const ConversationsRouteWithChildren = ConversationsRoute._addFileChildren(
  ConversationsRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/conversations": typeof ConversationsRouteWithChildren;
  "/conversations/$conversationId": typeof ConversationsConversationIdRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/conversations": typeof ConversationsRouteWithChildren;
  "/conversations/$conversationId": typeof ConversationsConversationIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/conversations": typeof ConversationsRouteWithChildren;
  "/conversations/$conversationId": typeof ConversationsConversationIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/conversations" | "/conversations/$conversationId";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/conversations" | "/conversations/$conversationId";
  id: "__root__" | "/" | "/conversations" | "/conversations/$conversationId";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  ConversationsRoute: typeof ConversationsRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ConversationsRoute: ConversationsRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/conversations"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/conversations": {
      "filePath": "conversations.tsx",
      "children": [
        "/conversations/$conversationId"
      ]
    },
    "/conversations/$conversationId": {
      "filePath": "conversations.$conversationId.tsx",
      "parent": "/conversations"
    }
  }
}
ROUTE_MANIFEST_END */
